LICENSE_FLAGS_WHITELIST = "commercial"

# sysvinit
#VIRTUAL-RUNTIME_init_manager = "sysvinit"

# Switch to systemd
DISTRO_FEATURES_append = " systemd"
DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"
VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = "systemd-compat-units"

# Add virtualization support
#DISTRO_FEATURES_append = " virtualization aufs kvm"

# timezone
DEFAULT_TIMEZONE = "Europe/Moscow"

# psplash
IMAGE_INSTALL_append = " psplash"

# kernel:
PREFERRED_VERSION_linux-raspberrypi = "5.10.%"

# This sets machine:
MACHINE ??= "raspberrypi4-64"

# disable splash
DISABLE_SPLASH = "1"

# video camera support
VIDEO_CAMERA = "1"

# disable boot logo
DISABLE_RPI_BOOT_LOGO = "1"

# HDMI 0 (from recipes-bsp/rpi-config_git.bbappend)
CONFIG_HDMI_0 = "1"

#IMAGE_FSTYPES ?= "tar.bz2 ext3 rpi-sdimg"
IMAGE_FSTYPES ?= "rpi-sdimg"

DISTRO_FEATURES_append += "bluez5"

# remove
DISTRO_FEATURES_remove = "x11"

# size memory GPU for Raspberry Pi
GPU_MEM = "128"
ENABLE_UART = "1"
RPI_USE_U_BOOT = "1"
ENABLE_I2C = "1"

# passed to make so setting it to “-j X”
PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()-1}"
#PARALLEL_MAKE ?= "-j 3"

# BitBake threads used to run tasks such as do_fetch, do_configure, do_compile etc
BB_NUMBER_THREADS ?= "${@oe.utils.cpu_count()}"
#BB_NUMBER_THREADS ?= "4"

# Default parallelism and resource usage for xz
XZ_MEMLIMIT ?= "95%"
XZ_THREADS ?= "${@oe.utils.cpu_count(at_least=2)}"

DL_DIR ?= "${TOPDIR}/downloads"
SSTATE_DIR ?= "${TOPDIR}/sstate-cache"
TMPDIR = "${TOPDIR}/tmp"

# Default policy config
DISTRO ?= "poky"

# Package Management configuration
PACKAGE_CLASSES ?= "package_ipk"

# SDK target architecture (i686 or x86_64)
SDKMACHINE ?= "x86_64"

# Extra image configuration defaults
EXTRA_IMAGE_FEATURES ?= "debug-tweaks"

# Additional image features
USER_CLASSES ?= "buildstats image-mklibs image-prelink"

INHERIT += "rm_work"

# Runtime testing of images
#IMAGE_CLASSES += "testimage testsdk"
#TESTIMAGE_AUTO_qemuall = "1"

# Interactive shell configuration
#OE_TERMINAL = "auto"
# By default disable interactive patch resolution (tasks will just fail instead):
PATCHRESOLVE = "noop"

# Disk Space Monitoring during the build
BB_DISKMON_DIRS ??= "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"

#
# Shared-state files from other locations
#
# As mentioned above, shared state files are prebuilt cache data objects which can
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
# cache locations to check for the shared objects.
# NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
# at the end as shown in the examples below. This will be substituted with the
# correct path within the directory structure.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \n \
#file://.* file:///some/local/dir/sstate/PATH"

#
# Yocto Project SState Mirror
#
# The Yocto Project has prebuilt artefacts available for its releases, you can enable
# use of these by uncommenting the following line. This will mean the build uses
# the network to check for artefacts at the start of builds, which does slow it down
# equally, it will also speed up the builds by not having to build things if they are
# present in the cache. It assumes you can download something faster than you can build it
# which will depend on your network.
#
#SSTATE_MIRRORS ?= "file://.* http://sstate.yoctoproject.org/2.5/PATH;downloadfilename=PATH"

#
# Qemu configuration
#
# By default native qemu will build with a builtin VNC server where graphical output can be
# seen. The line below enables the SDL UI frontend too.
PACKAGECONFIG_append_pn-qemu-system-native = " sdl"
# By default libsdl2-native will be built, if you want to use your host's libSDL instead of 
# the minimal libsdl built by libsdl2-native then uncomment the ASSUME_PROVIDED line below.
#ASSUME_PROVIDED += "libsdl2-native"

#
# Hash Equivalence
#
# Enable support for automatically running a local hash equivalence server and
# instruct bitbake to use a hash equivalence aware signature generator. Hash
# equivalence improves reuse of sstate by detecting when a given sstate
# artifact can be reused as equivalent, even if the current task hash doesn't
# match the one that generated the artifact.
#
# A shared hash equivalent server can be set with "<HOSTNAME>:<PORT>" format
#
#BB_HASHSERVE = "auto"
#BB_SIGNATURE_HANDLER = "OEEquivHash"

# CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
# track the version of this file when it was generated. This can safely be ignored if
# this doesn't mean anything to you.
CONF_VERSION = "1"
